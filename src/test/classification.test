#include <cxxtest/TestSuite.h>
#include <FPL/float.h>
#include "Values.h"


class TestClassification64 : public CxxTest::TestSuite
{
public:

    //-----------------------------------------------------
    // is_nan
    //-----------------------------------------------------
    void testIsNaN_NaN_ReturnsTrue()
    {
        TS_ASSERT(FPL_is_nan_64(Values::NAN_VAL));
    }
    
    void testIsNaN_Inf_ReturnsFalse()
    {
        TS_ASSERT(! FPL_is_nan_64(FPL_POSITIVE_INF_64));
    }
    
    void testIsNaN_Normal_False()
    {
        TS_ASSERT(! FPL_is_nan_64(Values::NORMAL_VAL));
    }
    
    //-----------------------------------------------------
    // is_inf
    //-----------------------------------------------------
    void testIsInf_PositiveInf_ReturnsTrue()
    {
        TS_ASSERT(FPL_is_inf_64(FPL_POSITIVE_INF_64));
    }
    
    void testIsInf_NegativeInf_ReturnsTrue()
    {
        TS_ASSERT(FPL_is_inf_64(FPL_NEGATIVE_INF_64));
    }
    
    void testIsInf_NaN_ReturnsFalse()
    {
        TS_ASSERT(! FPL_is_inf_64(Values::NAN_VAL));
    }
    
    void testIsInf_Normal_False()
    {
        TS_ASSERT(! FPL_is_inf_64(Values::NORMAL_VAL));
    }
    
    //-----------------------------------------------------
    // is_subnormal
    //-----------------------------------------------------
    void testIsSubnormal_Subnormal_ReturnsTrue()
    {
        TS_ASSERT(FPL_is_subnormal_64(Values::POS_SUBN_VAL));
    }
    
    void testIsSubnormal_NegativeSubnormal_ReturnsTrue()
    {
        TS_ASSERT(FPL_is_subnormal_64(Values::NEG_SUBN_VAL));
    }
    
    void testIsSubnormal_PositiveInf_ReturnsFalse()
    {
        TS_ASSERT(! FPL_is_subnormal_64(FPL_POSITIVE_INF_64));
    }
    
    void testIsSubnormal_NegativeZero_ReturnsFalse()
    {
        TS_ASSERT(! FPL_is_subnormal_64(FPL_NEGATIVE_ZERO_64));
    }
    
    //-----------------------------------------------------
    // is_normal
    //-----------------------------------------------------
    void testIsNormal_Normal_ReturnsTrue()
    {
        TS_ASSERT(FPL_is_normal_64(Values::NORMAL_VAL));
    }
    
    void testIsNormal_Zero_ReturnsFalse()
    {
        TS_ASSERT(! FPL_is_normal_64(FPL_POSITIVE_ZERO_64));
    }
    
    void testIsNormal_Inf_ReturnsFalse()
    {
        TS_ASSERT(! FPL_is_normal_64(FPL_NEGATIVE_INF_64));
    }
    
    void testIsNormal_NaN_ReturnsFalse()
    {
        TS_ASSERT(! FPL_is_normal_64(Values::NAN_VAL));
    }
    
    void testIsNormal_Subnormal_ReturnsFalse()
    {
        TS_ASSERT(! FPL_is_normal_64(Values::POS_SUBN_VAL));
    }
    
    //-----------------------------------------------------
    // is_zero
    //-----------------------------------------------------
    void testIsZero_PositiveZero_ReturnsTrue()
    {
        TS_ASSERT(FPL_is_zero_64(FPL_POSITIVE_ZERO_64));
    }
    
    void testIsZero_NegativeZero_ReturnsTrue()
    {
        TS_ASSERT(FPL_is_zero_64(FPL_NEGATIVE_ZERO_64));
    }

    void testIsZero_Subnormal_ReturnsFalse()
    {
        TS_ASSERT(! FPL_is_zero_64(Values::POS_SUBN_VAL));
    }    
    
    void testIsZero_Normal_ReturnsFalse()
    {
        TS_ASSERT(! FPL_is_zero_64(Values::NORMAL_VAL));
    }
    
    //-----------------------------------------------------
    // is_sign_minus
    //-----------------------------------------------------
    void testIsSignMinus_NegativeNormal_ReturnsTrue()
    {
        TS_ASSERT(FPL_is_sign_minus_64(Values::NEG_NORMAL_VAL));
    }
    
    void testIsSignMinus_NegativeSubnormal_ReturnsTrue()
    {
        TS_ASSERT(FPL_is_sign_minus_64(Values::NEG_SUBN_VAL));
    }
    
    void testIsSignMinus_NegativeZero_ReturnsTrue()
    {
        TS_ASSERT(FPL_is_sign_minus_64(FPL_NEGATIVE_ZERO_64));    
    }
    
    void testIsSignMinus_NegativeInfinity_ReturnsTrue()
    {
        TS_ASSERT(FPL_is_sign_minus_64(FPL_NEGATIVE_INF_64));
    }
    
    void testIsSignMinus_NegativeNaN_ReturnsTrue()
    {
        TS_ASSERT(FPL_is_sign_minus_64(Values::NEG_NAN_VAL));
    }
    
    void testIsSignMinus_PositiveNormal_ReturnsFalse()
    {
        TS_ASSERT(! FPL_is_sign_minus_64(Values::NORMAL_VAL));
    }    
    
    void testIsSignMinus_PositiveInfinity_ReturnsFalse()
    {
        TS_ASSERT(! FPL_is_sign_minus_64(FPL_POSITIVE_INF_64));
    }
    
    void testIsSignMinus_PositiveNaN_ReturnsFalse()
    {
        TS_ASSERT(! FPL_is_sign_minus_64(Values::NAN_VAL));
    }
};



